// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// classifySpatiallyByBlocks
Rcpp::NumericVector classifySpatiallyByBlocks(Rcpp::DataFrame df, std::string lon, std::string lat, int size);
RcppExport SEXP _RSpatial_classifySpatiallyByBlocks(SEXP dfSEXP, SEXP lonSEXP, SEXP latSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< std::string >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< std::string >::type lat(latSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(classifySpatiallyByBlocks(df, lon, lat, size));
    return rcpp_result_gen;
END_RCPP
}
// getDist
float getDist(float lon1, float lat1, float lon2, float lat2);
RcppExport SEXP _RSpatial_getDist(SEXP lon1SEXP, SEXP lat1SEXP, SEXP lon2SEXP, SEXP lat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type lon1(lon1SEXP);
    Rcpp::traits::input_parameter< float >::type lat1(lat1SEXP);
    Rcpp::traits::input_parameter< float >::type lon2(lon2SEXP);
    Rcpp::traits::input_parameter< float >::type lat2(lat2SEXP);
    rcpp_result_gen = Rcpp::wrap(getDist(lon1, lat1, lon2, lat2));
    return rcpp_result_gen;
END_RCPP
}
// poThin
Rcpp::NumericVector poThin(Rcpp::DataFrame df, double spacing, int dimension, std::string lon, std::string lat);
RcppExport SEXP _RSpatial_poThin(SEXP dfSEXP, SEXP spacingSEXP, SEXP dimensionSEXP, SEXP lonSEXP, SEXP latSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< double >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< int >::type dimension(dimensionSEXP);
    Rcpp::traits::input_parameter< std::string >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< std::string >::type lat(latSEXP);
    rcpp_result_gen = Rcpp::wrap(poThin(df, spacing, dimension, lon, lat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RSpatial_classifySpatiallyByBlocks", (DL_FUNC) &_RSpatial_classifySpatiallyByBlocks, 4},
    {"_RSpatial_getDist", (DL_FUNC) &_RSpatial_getDist, 4},
    {"_RSpatial_poThin", (DL_FUNC) &_RSpatial_poThin, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_RSpatial(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
